context.properties = {
	core.daemon = true              # listening for socket connections
	core.name   = pipewire-0        # core name and socket name
}

context.spa-libs = {
	audio.convert.* = audioconvert/libspa-audioconvert
	api.alsa.*      = alsa/libspa-alsa
	api.v4l2.*      = v4l2/libspa-v4l2
	api.libcamera.* = libcamera/libspa-libcamera
	api.bluez5.*    = bluez5/libspa-bluez5
	api.vulkan.*    = vulkan/libspa-vulkan
	api.jack.*      = jack/libspa-jack
	support.*       = support/libspa-support
}

context.modules = [
	# Uses realtime scheduling to boost the audio thread priorities. This uses
	# RTKit if the user doesn't have permission to use regular realtime
	# scheduling.
	{ name = libpipewire-module-rt
		args = {
			nice.level    = -11
			#rt.prio      = 88
			#rt.time.soft = -1
			#rt.time.hard = -1
		}
		flags = [ ifexists nofail ]
	}

	# The native communication protocol.
	{ name = libpipewire-module-protocol-native }

	# The profile module. Allows application to access profiler
	# and performance data. It provides an interface that is used
	# by pw-top and pw-profiler.
	{ name = libpipewire-module-profiler }

	# Allows applications to create metadata objects. It creates
	# a factory for Metadata objects.
	{ name = libpipewire-module-metadata }

	# Creates a factory for making devices that run in the
	# context of the PipeWire server.
	{ name = libpipewire-module-spa-device-factory }

	# Creates a factory for making nodes that run in the
	# context of the PipeWire server.
	{ name = libpipewire-module-spa-node-factory }

	# Allows creating nodes that run in the context of the
	# client. Is used by all clients that want to provide
	# data to PipeWire.
	{ name = libpipewire-module-client-node }

	# Allows creating devices that run in the context of the
	# client. Is used by the session manager.
	{ name = libpipewire-module-client-device }

	# The portal module monitors the PID of the portal process
	# and tags connections with the same PID as portal
	# connections.
	{ name = libpipewire-module-portal
		flags = [ ifexists nofail ]
	}

	# The access module can perform access checks and block
	# new clients.
	{ name = libpipewire-module-access
		args = {}
	}

	# Makes a factory for wrapping nodes in an adapter with a
	# converter and resampler.
	{ name = libpipewire-module-adapter }

	# Makes a factory for creating links between ports.
	{ name = libpipewire-module-link-factory }

	# Provides factories to make session manager objects.
	{ name = libpipewire-module-session-manager }
]

context.objects = [
	# A default dummy driver. This handles nodes marked with the "node.always-driver"
	# property when no other driver is currently active. JACK clients need this.
	{ factory = spa-node-factory
		args = {
			factory.name    = support.node.driver
			node.name       = Dummy-Driver
			node.group      = pipewire.dummy
			priority.driver = 20000
		}
	}
	{ factory = spa-node-factory
		args = {
			factory.name    = support.node.driver
			node.name       = Freewheel-Driver
			priority.driver = 19000
			node.group      = pipewire.freewheel
			node.freewheel  = true
		}
	}
]

context.exec = [
	{ path = "/usr/bin/pipewire-media-session" args = "" }
	{ path = "/usr/bin/pipewire" args = "-c pipewire-pulse.conf" }
]
